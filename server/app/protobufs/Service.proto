syntax = "proto3";

service MessageService {
    rpc AddMessage (Message) returns (MessageResponse);
    rpc ConsumeQueueMessage (ConsumeMessageRequest) returns (ConsumeMessageResponse);
    rpc ConsumeTopicMessage (ConsumeMessageRequest) returns (ConsumeMessagesResponse);
}

message Message {
    int32 id = 1;
    string type = 2;
    string routing_key = 3;
    string content = 4; 
}

message MessageResponse {
    int32 status_code = 1; 
}

message ConsumedMessage {
    string content = 1;
    int32 id = 2;
}

message ConsumeMessageRequest {
    int32 id = 1;
    string user_name = 2;
    int32 user_id = 3;
}

message ConsumeMessageResponse {
    int32 status_code = 1;
    string content = 2; 
}

message ConsumeMessagesResponse {
    int32 status_code = 1;
    repeated ConsumedMessage messages = 2; 
}



service QueueService {
    rpc Subscribe (SubscribeRequest) returns (SubscribeResponse);
    rpc UnSubscribe (SubscribeRequest) returns (SubscribeResponse);
    rpc Delete (DeleteRequest) returns (CRUDResponse); 
    rpc GetQueues (GetQueuesRequest) returns (GetQueuesResponse);
}

message Queue {
    int32 id = 1;
    string name = 2;
}

message GetQueuesRequest {
    int32 allQueues = 1;
}

message GetQueuesResponse {
    repeated Queue queues = 1;
}

message SubscribeRequest {
    int32 queue_id = 1;
    int32 user_id = 2;
    string user_name = 3;
}

message SubscribeResponse {
    int32 status_code = 1;
}

message DeleteRequest {
    int32 id = 1;
    int32 user_id = 2;
}

message CRUDResponse {
    int32 status_code = 1;
}


service TopicService {
    rpc Subscribe (SubscribeTopicRequest) returns (SubscribeResponse);
    rpc UnSubscribe (SubscribeTopicRequest) returns (SubscribeResponse);
    rpc Delete (DeleteRequest) returns (CRUDResponse); 
    rpc GetTopics (GetTopicsRequest) returns (GetTopicsResponse);
}

message Topic {
    int32 id = 1;
    string name = 2;
}

message SubscribeTopicRequest {
    int32 topic_id = 1;
    int32 user_id = 2;
    string user_name = 3;
    string routing_key = 4;
}

message GetTopicsRequest {
    int32 allTopics = 1;
}

message GetTopicsResponse {
    repeated Topic topic = 1;
}



service UserService {
    rpc Register (RegisterRequest) returns (RegisterResponse);
    rpc GetUserTopicQueues (GetUserTopicQueuesRequest) returns (GetQueuesResponse);
}

message RegisterRequest {
    string user_name = 1;
    string user_password = 2;
    int32 user_id = 3;
}

message RegisterResponse {
    int32 status_code = 1;
}

message GetUserTopicQueuesRequest {
    int32 user_id = 1;    
}
